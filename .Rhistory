sample(1:145, 25, replace=FALSE)
sample(1:40, 5, replace=FALSE)
sample(41:56, 5, replace=FALSE)
sample(57:90, 5, replace=FALSE)
sample(91:145, 5, replace=FALSE)
> install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
swirl::install_course("R Programming")
library("swirl")
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0. 10)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5,10, length=30)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- "My", "name", "is"
my_char <- "My" "name" "is"
my_char <- "My", "name", "is".
my_char <- "My" , "name" , "is".
my_char <- "My","name","is"
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Camden").
c(my_char, "Camden")
my_name <- c(my_char, "Camden")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
library("swirl")
swirl()
num_vect <- c(0.5, 55, -10, 6)
num_vect < 1
tf <- num_vect <1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Camden")
my_name
paste (my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z") sep = "")
paste(1:3 c("X", "Y", "Z") sep = "")
paste(c("X", "Y", "Z") sep = "")
paste (1:3, c("X", "Y", "Z") sep = "")
paste (c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
library("swirl")
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4.5)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
? matrix()
info()
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- vector("Bill", "Gina", "Kelly", "Sean")
help()
help(vector)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
data(cars)
help(cars)
head(cars)
plot(cars)
help(plot)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
load(mtcars)
mtcars
data(mtcars)
help(boxplot)
boxplot(formula = pmg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(c(mtcars$mpg))
hist(mtcars$mpg)
#defines file to return and line to return
file_to_return <- read.csv("iris.csv",header=TRUE)
setwd("~/Desktop/classes_fa22/biocomputing/homeworks/Exercise08")
#defines file to return and line to return
file_to_return <- read.csv("iris.csv",header=TRUE)
lines_to_return <- 15
#prints first few rows of the file based on desired line number
file_to_return[1:lines_to_return,]
install.packages("ggplot2")
install.packages("cowplot")
setwd("~/Desktop/classes_fa22/biocomputing/files")
mpg <- read.table("mpg.txt",header=TRUE,sep="\t")
mpg
dim(mpg)
head(mpg)
ggplot(data = mpg,
aes(x = displ, y = cty)) +
geom_point()
ggplot2(data = mpg,
aes(x = displ, y = cty)) +
geom_point()
ggplot(data = mpg, aes(x = displ, y = cty)) + geom_point()
library(ggplot2)
ggplot(data = mpg, aes(x = displ, y = cty)) + geom_point()
library(cowplot)
ggplot(data = mpg, aes(x = displ, y = cty)) + geom_point() + theme_classic()
?grep
setwd("~/Desktop/classes_fa22/biocomputing/homeworks/Exercise08")
which(iris[,2]>3.5)
iris[iris$Sepal.Width>3.5,]
#defines file to return and line to return
file_to_return <- read.csv("iris.csv",header=TRUE)
lines_to_return <- 15
#prints first few rows of the file based on desired line number
file_to_return[1:lines_to_return,]
iris <- read.csv("iris.csv")
#prints last two rows in the last two columns of file
iris[(nrow(iris)-1):nrow(iris),(ncol(iris)-1):ncol(iris)]
nrow(iris)
#prints number of observations for each species in the dataset
length(which(iris$Species == "setosa"))
length(which(iris$Species == "versicolor"))
length(which(iris$Species == "virginica"))
#prints rows with Sepal.Width > 3.5
iris[iris$Sepal.Width>3.5,]
#writes data for setosa species to comma delimited file setosa.csv
setosa_data <- iris[iris$Species=="setosa",]
setosa_data
write.csv(setosa_data, file="setosa.csv")
#calculates mean, min, and max Petal.Length for virginica
virginica.data <- iris[iris$Species=="virginica",]
virginica.data
mean(virginica.data$Petal.Length)
min(virginica.data$Petal.Length)
max(virginica.data$Petal.Length)
#defines file to return and line to return
file_to_return <- read.csv("iris.csv",header=TRUE)
lines_to_return <- 15
lines_to_return <- 10
#prints first few rows of the file based on desired line number
file_to_return[1:lines_to_return,]
iris <- read.csv("iris.csv")
#prints last two rows in the last two columns of file
iris[(nrow(iris)-1):nrow(iris),(ncol(iris)-1):ncol(iris)]
#prints number of observations for each species in the dataset
length(which(iris$Species == "setosa"))
length(which(iris$Species == "versicolor"))
length(which(iris$Species == "virginica"))
#prints rows with Sepal.Width > 3.5
iris[iris$Sepal.Width>3.5,]
#writes data for setosa species to comma delimited file setosa.csv
setosa_data <- iris[iris$Species=="setosa",]
setosa_data
iris
write.csv(setosa_data, file="setosa.csv")
#calculates mean, min, and max Petal.Length for virginica
virginica.data <- iris[iris$Species=="virginica",]
virginica.data
mean(virginica.data$Petal.Length)
min(virginica.data$Petal.Length)
max(virginica.data$Petal.Length)
